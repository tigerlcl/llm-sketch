I'll go through the process of filling in each missing value with Python code solutions.

**Missing Value 1: ema5 in row 8**

Step 1: Finding Missing Value
The missing value is located in the `ema5` column and is denoted by `nan`. The entire row where the missing values are located is:

2015-02-03 14:15:00+05:30,418.54,419,417.94,418.43,7390,418.572,418.4348337,nan,1.54,-0.100248234,54.77489382

Step 2: Finding Related Columns
The related columns are `sma5` and the other technical indicators (`MOM10`, `ROC5`, `RSI8`) that might be helpful in imputing the missing value.

Step 3: Drafting Solution
A possible solution is to use a weighted average of the nearby values, considering the trends and patterns in the other columns. For example, we could take the average of the previous and next non-missing `ema5` values.

Step 4: Calculating Intermediate Values
No unknown variables are needed for this step.

Step 5: Calculating and Verifying Parameters
We don't need to calculate any parameters for this step.

Step 6: Finding Related Rows
The related rows are the previous and next non-missing `ema5` values in the same column. For example, we could use the average of `418.38` (previous row) and `418.49` (next row).

Step 7: Rebuilding Solution in Code
Here's the Python code to impute the missing value:
```python
import numpy as np

# Find previous and next non-missing ema5 values
prev_ema5 = data.iloc[7]['ema5']
next_ema5 = data.iloc[9]['ema5']

# Calculate weighted average of nearby values
weighted_avg = (prev_ema5 + next_ema5) / 2

data.loc[8, 'ema5'] = weighted_avg
```
**Missing Value 2: ema5 in row 11**

Step 1: Finding Missing Value
The missing value is located in the `ema5` column and is denoted by `nan`. The entire row where the missing values are located is:

2015-02-03 15:55:00+05:30,418,418.78,418,418.02,26090,418.238,418.1530536,-30.83804143,0.49,-0.10, nan

Step 2: Finding Related Columns
The related columns are `sma5` and the other technical indicators (`MOM10`, `ROC5`, `RSI8`) that might be helpful in imputing the missing value.

Step 3: Drafting Solution
A possible solution is to use a weighted average of the nearby values, considering the trends and patterns in the other columns. For example, we could take the average of the previous non-missing `ema5` values.

Step 4: Calculating Intermediate Values
No unknown variables are needed for this step.

Step 5: Calculating and Verifying Parameters
We don't need to calculate any parameters for this step.

Step 6: Finding Related Rows
The related row is the previous non-missing `ema5` value in the same column. For example, we could use the average of `418.10` (previous row).

Step 7: Rebuilding Solution in Code
Here's the Python code to impute the missing value:
```python
import numpy as np

# Find previous non-missing ema5 values
prev_ema5 = data.iloc[10]['ema5']

# Calculate weighted average of nearby values
weighted_avg = prev_ema5

data.loc[11, 'ema5'] = weighted_avg
```
**Missing Value 3: rsi8 in row 14**

Step 1: Finding Missing Value
The missing value is located in the `RSI8` column and is denoted by `nan`. The entire row where the missing values are located is:

2015-02-03 15:05:00+05:30,418,418.87,415,418,85,417.24,416.79,-145.31435,nan,-0.12,-1.06

Step 2: Finding Related Columns
The related columns are `MOM10` and the other technical indicators (`sma5`, `ema5`) that might be helpful in imputing the missing value.

Step 3: Drafting Solution
A possible solution is to use a weighted average of nearby values, considering trends and patterns in the other columns. For example, we could take the average of the previous non-missing RSI8 values.

Step 4: Calculating Intermediate Values
No unknown variables are needed for this step.

Step 5: Calculating and Verifying Parameters
We don't need to calculate any parameters for this step.

Step 6: Finding Related Rows
The related row is the previous non-missing RSI8 value in the same column. For example, we could use the average of -1.06 (previous row).

Step 7: Rebuilding Solution in Code
Here's the Python code to impute the missing value:
```python
import numpy as np

# Find previous non-missing RSI8 values
prev_rsi8 = data.iloc[13]['RSI8']

# Calculate weighted average of nearby values
weighted_avg = prev_rsi8

data.loc[14, 'RSI8'] = weighted_avg
```
Please note that these are just examples and the actual imputation method may vary depending on the specific characteristics of your dataset.